#!/usr/bin/env node
const fs = require('fs')
const Hypervisor = require('primea-hypervisor')
const {Message, FunctionRef} = require('primea-objects')
const EgressDriver = require('primea-hypervisor/egressDriver')
const WasmContainer = require('primea-wasm-container')
const yargs = require('yargs')
const argv = yargs.argv

const level = require('level-browserify')
const RadixTree = require('dfinity-radix-tree')

const db = level(`${__dirname}/testdb`)
const tree = new RadixTree({db})
const egress = new EgressDriver()

egress.on('message', msg => {
  console.log(msg.funcArguments[0].toString())
})

const hypervisor = new Hypervisor(tree, [WasmContainer], [egress])

async function main () {
  if (argv.root) {
    await hypervisor.setStateRoot(Buffer.from(argv.root, 'hex'))
  }

  if (argv.create) {
    const wasm = fs.readFileSync(argv.create)
    const {module} = hypervisor.createActor(WasmContainer.typeId, wasm)
    if (argv.run) {
      let xs = argv.run.split(",");
      xs.map((f) => {
          const funcRef = module.getFuncRef(f)
          funcRef.gas = argv.gas || 20000
          const message = new Message({
            funcRef,
            funcArguments: [new FunctionRef({actorID: egress.id, params: ['data']})]
          }).on('execution:error', e => console.error(e))
          hypervisor.send(message)
      });
    }
  }
  const sr = await hypervisor.createStateRoot()
  console.log('state root:', sr.toString('hex'))
}

main()
